import os
import pprint
import sys

import requests
from PIL import Image
from openai import OpenAI

from meme import memeify

IMAGE, MODERATE, MEME, TRANS = (0, 1, 2, 3,)


def init_openai(api_key=None):
    if api_key is None:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("Error: OPENAI_API_KEY environment variable not set.")
            sys.exit(1)

    return OpenAI(api_key=api_key)


client = init_openai()


def generate_image(text):
    """
    Uses OpenAI API to request an image to be generated by their DallE model.

    :param text: text prompt for OpenAI image generation
    :return: URL to the image or None if failed
    """
    res = client.images.generate(
        model="dall-e-3",
        prompt=text,
        n=1,
        quality="standard",
        size="1024x1024",
    )
    try:
        url = res.data[0].url
    except (IndexError, AttributeError, KeyError) as e:
        url = None
    print(f"Generated URL for [{text}]: {url}")
    return url


def moderate(text):
    """
    Uses OpenAI API to analyzes text and detects any harmful or unpleasant words

    :param text: text prompt to be moderated
    :return: categories and scores in a dictionary
    """
    response = client.moderations.create(
        input=text
    )
    return response.results[0].to_dict()


def translate(path):
    """
    Uses OpenAI API to listen to a foreign language audio  and translate its speech content into English
    :param path: a string path to the audio file
    :return: translated text of the audio
    """
    with open(path, "rb") as audio_file:
        translation = client.audio.translations.create(
            model="whisper-1",
            file=audio_file,
        )
    return translation.text


if __name__ == "__main__":
    prompt = (
        f"Choose an option:\n"
        f"{IMAGE}: Generate an Image\n"
        f"{MODERATE}: Moderate Text\n"
        f"{MEME}: Create a Meme\n"
        f"{TRANS}: Translate audio file\n"
        "Enter your choice: "
    )
    choice = int(input(prompt))
    if choice == IMAGE:
        text = input("What image you would like me to generate? ")
        url = generate_image(text)
        if url:
            im = Image.open(requests.get(url, stream=True).raw)
            im.show()
    elif choice == MODERATE:
        text = input("Enter the text for me to check: ")
        output = moderate(text)
        pprint.pprint(output)
    elif choice == MEME:
        url = input("Enter URL for an image to be memeified: ")
        memeify(url, caption=None, show_image=True)
    elif choice == TRANS:
        path = input("Path to audio file? ")
        print(translate(path))
